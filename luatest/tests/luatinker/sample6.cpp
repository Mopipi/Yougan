// sample3.cpp : LuaTinker 의 클래스 기능을 알아본다.
//

extern "C" 
{
	#include "lua.h"
	#include "lualib.h"
	#include "lauxlib.h"
};

#include "luatinker.h"

// 함수 형태가 int(*)(lua_State*) 또는 int(*)(lua_State*,T1) 일 경우만 lua_yield() 를 쓸 수 있다.
// 함수 인자가 더 필요할 경우 luatinker.h 의 "functor (non-managed)" 코멘트 부분을 참고해서 직접 추가할 것
int TestFunc(lua_State* L)
{
	printf("# TestFunc 실행중\n");
	return lua_yield(L, 0);
}

int TestFunc2(lua_State* L, float a)
{
	printf("# TestFunc2(L,%f) 실행중\n", a);
	return lua_yield(L, 0);
}

class TestClass
{
public:

	// 함수 형태가 int(T::*)(lua_State*) 또는 int(T::*)(lua_State*,T1) 일 경우만 lua_yield() 를 쓸 수 있다.
	// 함수 인자가 더 필요할 경우 luatinker.h 의 "class member functor (non-managed)" 코멘트 부분을 참고해서 직접 추가할 것
	int TestFunc(lua_State* L)
	{
		printf("# TestClass::TestFunc 실행중\n");
		return lua_yield(L, 0);
	}

	int TestFunc2(lua_State* L, float a)
	{
		printf("# TestClass::TestFunc2(L,%f) 실행중\n", a);
		return lua_yield(L, 0);
	}
};

int main()
{
	// Lua 를 초기화 한다.
	lua_State* L = luaL_newstate();

	// Lua 기본 함수들을 로드한다.- print() 사용
    luaL_openlibs(L);
	// Lua 문자열 함수들을 로드한다.- string 사용
	luaopen_string(L);

	// TestFunc 함수를 Lua 에 등록한다.
	luatinker::def(L, "TestFunc", &TestFunc);
	luatinker::def(L, "TestFunc2", &TestFunc2);

	// TestClass 클래스를 Lua 에 추가한다.
	luatinker::class_add<TestClass>(L, "TestClass");
	// TestClass 의 함수를 등록한다.
	luatinker::class_def<TestClass>(L, "TestFunc", &TestClass::TestFunc);
	luatinker::class_def<TestClass>(L, "TestFunc2", &TestClass::TestFunc2);

	// TestClass 를 전역 변수로 선언한다.
	TestClass g_test;
	luatinker::set(L, "g_test", &g_test);

	// sample3.lua 파일을 로드한다.
	luatinker::dofile(L, "sample6.lua");

	// Thread 를 시작한다.
	lua_newthread(L);
    {//pixs alter:
        //lua_pushstring(L, "ThreadTest");
        //lua_gettable(L, LUA_GLOBALSINDEX);

        lua_getglobal(L, "ThreadTest");
    }


	// Thread 를 시작한다.
	printf("* lua_resume() 호출\n");
    /*pixs alter*/lua_resume(L, 0, 0); //lua_resume(L, 0);

	// Thread 를 다시 시작한다.
	printf("* lua_resume() 호출\n");
    /*pixs alter*/lua_resume(L, 0, 0); //lua_resume(L, 0);

	// Thread 를 다시 시작한다.
	printf("* lua_resume() 호출\n");
    /*pixs alter*/lua_resume(L, 0, 0); //lua_resume(L, 0);

	// Thread 를 다시 시작한다.
	printf("* lua_resume() 호출\n");
    /*pixs alter*/lua_resume(L, 0, 0); //lua_resume(L, 0);

	// Thread 를 다시 시작한다.
	printf("* lua_resume() 호출\n");
    /*pixs alter*/lua_resume(L, 0, 0); //lua_resume(L, 0);

	// 프로그램 종료
	lua_close(L);

	return 0;
}

